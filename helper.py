import datetime
import random
import string
import names
from rstr import Rstr
import pydicom

"""
Random uses current system time as seed if no seed is defined
Note that these random generators do not need to be cryptographically secure
because they aren't used for encryption or passwords. For those purposes we can use
''.join(random.SystemRandom().choices(string.ascii_uppercase + string.digits, k=N)
"""


def generate_random(VR):  # x is the Value Representation
    if VR == "AE":
        # Application Entity
        return "".join(random.choices(string.ascii_letters + string.digits, k=8))
        # k can be 16 bytes max. we use ascii chars+numbers which are 1 byte each in utf-8

    if VR == "AS":
        # Age String
        return "".join(random.choices(string.digits, k=3), random.choices("DWMY"))

    if VR == "AT":
        # Attribute Tag
        return "".join(
            "(",
            random.choices(string.digits, k=4),
            ",",
            random.choices(string.digits, k=4),
            ")",
        )

    if VR == "CS":
        # Code String
        return "".join(
            random.choices(string.ascii_uppercase + string.digits + " _"), k=8
        )
        # max = 16

    if VR == "DA":
        # Date
        start_date = datetime.date(2000, 1, 1)
        random_date = start_date + datetime.timedelta(days=random.randint(1, 9999))
        return str(random_date).replace("-", "")

    if VR == "DS":
        # Decimal string - can be any 16 byte ANSI floating point string but we use simple int
        # because those are also valid
        return "".join(random.choices(string.digits, k=8))

    if VR == "TM":
        # Time - Note that this implementation does not produce fractional time beyond seconds
        # Up to 6 extra digits are supported by DICOM
        random_time = datetime.time(
            random.randint(0, 23), random.randint(0, 60), random.randint(0, 60)
        )
        return str(random_time)

    if VR == "DT":
        # Date Time - We use combination of rand_DA + rand_TM to generate this
        # We do not use Fractional Seconds or Offset from UTC bytes to simplify the process
        start_date = datetime.date(2000, 1, 1)
        random_date = start_date + datetime.timedelta(days=random.randint(1, 9999))
        date = str(random_date).replace("-", "")
        random_time = str(datetime.time(
            random.randint(0, 23), random.randint(0, 60), random.randint(0, 60)
        ))
        return date + random_time

    if VR == "FL":
        # Single precision float
        return float(str(random.random())[0:-8])

    if VR == "FD":
        # Double precision float
        return float(str(random.random()))

    if VR == "IS":
        # Integer String up to +- 2^31-1
        return "".join(random.choices(string.digits, k=8))

    if VR == "LO":
        # Long String
        return "".join(
            random.choices(string.ascii_letters, k=random.randint(1, 32))
        )  # 64 max

    if VR == "LT":
        # Long Text
        return "".join(
            random.choices(string.ascii_letters, k=random.randint(1, 5120))
        )  # 10240 max

    if VR == "OB":
        # Other Byte String
        return random.randbytes(8)

    if VR == "OD":
        # Other Double String
        return str(random.random())

    if VR == "OF":
        # Other Float String
        return str(random.random())[0:-8]

    if VR == "OW":
        # Other Word String - String of 16 bit words
        return "".join(random.choices(string.ascii_letters, n=2))

    if VR == "PN":
        # Person Name
        return names.get_full_name()

    if VR == "SH":
        # Short String
        return "".join(random.choices(string.ascii_letters, k=4))

    if VR == "SL":
        # Signed Long
        return random.randint(-1073741824, 1073741823)  # supports upto 2^31

    if VR == "SQ":
        # Sequence of Items - return sequence of 0 items
        return pydicom.Sequence([])

    if VR == "SS":
        # Signed Short
        return random.randint(-16384, 16383)  # supports upto 2^15

    if VR == "ST":
        # Short Text
        return "".join(
            random.choices(
                string.ascii_letters + " .,\n;:-_+-=/", k=random.randint(0, 512)
            )
        )  # max 1024

    if VR == "UI":
        # Unique Identifier
        return "".join(random.choices(string.digits, k=32))  # max 64 bytes

    if VR == "UL":
        # Unsigned Long
        return random.randint(0, 2 ^ 31)  # max 2^32

    if VR == "UN":
        # Unknown
        return "Unknown"

    if VR == "US":
        # Unsigned Short
        return random.randint(0, 2 ^ 15)  # max 2^16

    if VR == "UT":
        # Unlimited Text
        return "".join(
            random.choices(
                string.ascii_letters + string.digits + " .,\n;:-_+-=/",
                k=random.randint(1, 2 ^ 16),
            )
        )  # max 2^32-2bytes


"""
Made using helper_scripts/create_anon_dict.py
Only compatible with the latest DICOM standard tags
Cannot handle retired tags from older versions yet
"""

anonymization_dict = {
    "(0008, 0050)": "Z",
    "(0018, 4000)": "X",
    "(0040, 0555)": "X/Z",
    "(0008, 0022)": "X/Z",
    "(0008, 002A)": "X/Z/D",
    "(0018, 1400)": "X/D",
    "(0018, 11BB)": "D",
    "(0018, 9424)": "X",
    "(0008, 0032)": "X/Z",
    "(0040, 4035)": "X",
    "(0010, 21B0)": "X",
    "(0040, A353)": "X",
    "(0038, 0010)": "X",
    "(0038, 0020)": "X",
    "(0008, 1084)": "X",
    "(0008, 1080)": "X",
    "(0038, 0021)": "X",
    "(0000, 1000)": "X",
    "(0010, 2110)": "X",
    "(006A, 0006)": "X",
    "(006A, 0005)": "D",
    "(006A, 0003)": "D",
    "(0044, 0004)": "X",
    "(4000, 0010)": "X",
    "(0044, 0104)": "D",
    "(0044, 0105)": "X",
    "(0400, 0562)": "D",
    "(0040, A078)": "X",
    "(2200, 0005)": "X/Z",
    "(300A, 00C3)": "X",
    "(300C, 0127)": "D",
    "(300A, 00DD)": "X",
    "(0010, 1081)": "X",
    "(0014, 407E)": "X",
    "(0018, 1203)": "Z",
    "(0014, 407C)": "X",
    "(0016, 004D)": "X",
    "(0018, 1007)": "X",
    "(0400, 0310)": "X",
    "(0012, 0060)": "Z",
    "(0012, 0082)": "X",
    "(0012, 0081)": "D",
    "(0012, 0020)": "D",
    "(0012, 0021)": "Z",
    "(0012, 0072)": "X",
    "(0012, 0071)": "X",
    "(0012, 0030)": "Z",
    "(0012, 0031)": "Z",
    "(0012, 0010)": "D",
    "(0012, 0040)": "D",
    "(0012, 0042)": "D",
    "(0012, 0051)": "X",
    "(0012, 0050)": "Z",
    "(0040, 0310)": "X",
    "(0040, 0280)": "X",
    "(300A, 02EB)": "X",
    "(0020, 9161)": "U",
    "(3010, 000F)": "Z",
    "(3010, 0017)": "Z",
    "(3010, 0006)": "U",
    "(0040, 3001)": "X",
    "(3010, 0013)": "U",
    "(0008, 009C)": "Z",
    "(0008, 009D)": "X",
    "(0050, 001B)": "X",
    "(0040, 051A)": "X",
    "(0040, 0512)": "D",
    "(0070, 0086)": "X",
    "(0070, 0084)": "Z/D",
    "(0008, 0023)": "Z/D",
    "(0040, A730)": "D",
    "(0008, 0033)": "Z/D",
    "(0008, 0107)": "D",
    "(0008, 0106)": "D",
    "(0018, 0010)": "Z/D",
    "(0018, 1042)": "X",
    "(0018, 1043)": "X",
    "(0018, A002)": "X",
    "(0018, A003)": "X",
    "(0010, 2150)": "X",
    "(2100, 0040)": "X",
    "(2100, 0050)": "X",
    "(0040, A307)": "X",
    "(0038, 0300)": "X",
    "(50xx, xxxx)": "X",
    "(0008, 0025)": "X",
    "(0008, 0035)": "X",
    "(0040, A07C)": "X",
    "(FFFC, FFFC)": "X",
    "(0040, A121)": "D",
    "(0040, A110)": "X",
    "(0018, 1200)": "X",
    "(0018, 700C)": "X/D",
    "(0018, 1012)": "X",
    "(0040, A120)": "D",
    "(0018, 1202)": "X",
    "(0018, 9701)": "D",
    "(0018, 937F)": "X",
    "(0008, 2111)": "X",
    "(0018, 700A)": "X/D",
    "(3010, 001B)": "Z",
    "(0050, 0020)": "X",
    "(3010, 002D)": "D",
    "(0018, 1000)": "X/Z/D",
    "(0016, 004B)": "X",
    "(0018, 1002)": "U",
    "(0400, 0105)": "D",
    "(FFFA, FFFA)": "X",
    "(0400, 0100)": "U",
    "(0020, 9164)": "U",
    "(0038, 0030)": "X",
    "(0038, 0040)": "X",
    "(0038, 0032)": "X",
    "(300A, 079A)": "X",
    "(4008, 011A)": "X",
    "(4008, 0119)": "X",
    "(300A, 0016)": "X",
    "(300A, 0013)": "U",
    "(3010, 006E)": "U",
    "(0068, 6226)": "D",
    "(0018, 9517)": "X/D",
    "(3010, 0037)": "X",
    "(3010, 0035)": "D",
    "(3010, 0038)": "D",
    "(3010, 0036)": "X",
    "(300A, 0676)": "X",
    "(0012, 0087)": "X",
    "(0012, 0086)": "X",
    "(0010, 2160)": "X",
    "(0018, 9804)": "D",
    "(0040, 4011)": "X",
    "(0008, 0058)": "U",
    "(0070, 031A)": "U",
    "(0040, 2017)": "Z",
    "(0040, A023)": "X",
    "(0040, A024)": "X",
    "(3008, 0054)": "X/D",
    "(300A, 0196)": "X",
    "(0034, 0002)": "D",
    "(0034, 0001)": "D",
    "(3010, 007F)": "Z",
    "(300A, 0072)": "X",
    "(0018, 9074)": "D",
    "(0020, 9158)": "X",
    "(0020, 0052)": "U",
    "(0034, 0007)": "D",
    "(0018, 9151)": "D",
    "(0018, 9623)": "D",
    "(0018, 1008)": "X",
    "(0018, 1005)": "X",
    "(0016, 0076)": "X",
    "(0016, 0075)": "X",
    "(0016, 008C)": "X",
    "(0016, 008D)": "X",
    "(0016, 0088)": "X",
    "(0016, 0087)": "X",
    "(0016, 008A)": "X",
    "(0016, 0089)": "X",
    "(0016, 0084)": "X",
    "(0016, 0083)": "X",
    "(0016, 0086)": "X",
    "(0016, 0085)": "X",
    "(0016, 008E)": "X",
    "(0016, 007B)": "X",
    "(0016, 0081)": "X",
    "(0016, 0080)": "X",
    "(0016, 0072)": "X",
    "(0016, 0071)": "X",
    "(0016, 0074)": "X",
    "(0016, 0073)": "X",
    "(0016, 0082)": "X",
    "(0016, 007A)": "X",
    "(0016, 008B)": "X",
    "(0016, 0078)": "X",
    "(0016, 007D)": "X",
    "(0016, 007C)": "X",
    "(0016, 0079)": "X",
    "(0016, 0077)": "X",
    "(0016, 007F)": "X",
    "(0016, 007E)": "X",
    "(0016, 0070)": "X",
    "(0070, 0001)": "D",
    "(0072, 000A)": "D",
    "(0040, E004)": "X",
    "(0040, 4037)": "X",
    "(0040, 4036)": "X",
    "(0088, 0200)": "X",
    "(0008, 4000)": "X",
    "(0020, 4000)": "X",
    "(0028, 4000)": "X",
    "(0040, 2400)": "X",
    "(003A, 0314)": "D",
    "(4008, 0300)": "X",
    "(0068, 6270)": "D",
    "(0008, 0015)": "X",
    "(0008, 0012)": "X/D",
    "(0008, 0013)": "X/Z/D",
    "(0008, 0014)": "U",
    "(0400, 0600)": "X",
    "(0008, 0081)": "X",
    "(0008, 1040)": "X",
    "(0008, 1041)": "X",
    "(0008, 0082)": "X/Z/D",
    "(0008, 0080)": "X/Z/D",
    "(0018, 9919)": "Z/D",
    "(0010, 1050)": "X",
    "(3010, 0085)": "X",
    "(3010, 004D)": "X/D",
    "(3010, 004C)": "X/D",
    "(0040, 1011)": "X",
    "(300A, 0741)": "D",
    "(300A, 0742)": "D",
    "(300A, 0783)": "D",
    "(4008, 0112)": "X",
    "(4008, 0113)": "X",
    "(4008, 0111)": "X",
    "(4008, 010C)": "X",
    "(4008, 0115)": "X",
    "(4008, 0200)": "X",
    "(4008, 0202)": "X",
    "(4008, 0100)": "X",
    "(4008, 0101)": "X",
    "(4008, 0102)": "X",
    "(4008, 010B)": "X",
    "(4008, 010A)": "X",
    "(4008, 0108)": "X",
    "(4008, 0109)": "X",
    "(0018, 0035)": "X",
    "(0018, 0027)": "X",
    "(0008, 3010)": "U",
    "(0040, 2004)": "X",
    "(0038, 0011)": "X",
    "(0038, 0014)": "X",
    "(0010, 0021)": "X",
    "(0038, 0061)": "X",
    "(0038, 0064)": "X",
    "(0040, 0513)": "Z",
    "(0040, 0562)": "Z",
    "(0040, 2005)": "X",
    "(2200, 0002)": "X/Z",
    "(0028, 1214)": "U",
    "(0010, 21D0)": "X",
    "(0016, 004F)": "X",
    "(0016, 0050)": "X",
    "(0016, 0051)": "X",
    "(0016, 004E)": "X",
    "(0050, 0021)": "X",
    "(0400, 0404)": "X",
    "(0016, 002B)": "X",
    "(0018, 100B)": "U",
    "(3010, 0043)": "Z",
    "(0002, 0003)": "U",
    "(0010, 2000)": "X",
    "(0010, 1090)": "X",
    "(0010, 1080)": "X",
    "(0400, 0550)": "X",
    "(0020, 3403)": "X",
    "(0020, 3406)": "X",
    "(0020, 3405)": "X",
    "(0020, 3401)": "X",
    "(0400, 0563)": "D",
    "(3008, 0056)": "X/D",
    "(0018, 937B)": "X",
    "(003A, 0310)": "U",
    "(0008, 1060)": "X",
    "(0040, 1010)": "X",
    "(0400, 0552)": "X",
    "(0400, 0551)": "X",
    "(0040, A192)": "X",
    "(0040, A032)": "X/D",
    "(0040, A033)": "X",
    "(0040, A402)": "U",
    "(0040, A193)": "X",
    "(0040, A171)": "U",
    "(0010, 2180)": "X",
    "(0008, 1072)": "X/D",
    "(0008, 1070)": "X/Z/D",
    "(0040, 2010)": "X",
    "(0040, 2011)": "X",
    "(0040, 2008)": "X",
    "(0040, 2009)": "X",
    "(0400, 0561)": "X",
    "(0010, 1000)": "X",
    "(0010, 1002)": "X",
    "(0010, 1001)": "X",
    "(60xx, 4000)": "X",
    "(60xx, 3000)": "X",
    "(0008, 0024)": "X",
    "(0008, 0034)": "X",
    "(300A, 0760)": "D",
    "(0028, 1199)": "U",
    "(0040, A07A)": "X",
    "(0040, A082)": "Z",
    "(0010, 1040)": "X",
    "(0010, 1010)": "X",
    "(0010, 0030)": "Z",
    "(0010, 1005)": "X",
    "(0010, 0032)": "X",
    "(0038, 0400)": "X",
    "(0010, 0050)": "X",
    "(0010, 1060)": "X",
    "(0010, 0010)": "Z",
    "(0010, 0101)": "X",
    "(0010, 0102)": "X",
    "(0010, 21F0)": "X",
    "(0010, 0040)": "Z",
    "(0010, 2203)": "X/Z",
    "(0010, 1020)": "X",
    "(0010, 2155)": "X",
    "(0010, 2154)": "X",
    "(0010, 1030)": "X",
    "(0010, 4000)": "X",
    "(0010, 0020)": "Z",
    "(300A, 0794)": "X",
    "(300A, 0650)": "U",
    "(0038, 0500)": "X",
    "(0040, 1004)": "X",
    "(300A, 0792)": "X",
    "(300A, 078E)": "X",
    "(0040, 0243)": "X",
    "(0040, 0254)": "X",
    "(0040, 0250)": "X",
    "(0040, 4051)": "X",
    "(0040, 0251)": "X",
    "(0040, 0253)": "X",
    "(0040, 0244)": "X",
    "(0040, 4050)": "X",
    "(0040, 0245)": "X",
    "(0040, 0241)": "X",
    "(0040, 4030)": "X",
    "(0040, 0242)": "X",
    "(0040, 4028)": "X",
    "(0008, 1050)": "X",
    "(0008, 1052)": "X",
    "(0040, 1102)": "X",
    "(0040, 1104)": "X",
    "(0040, 1103)": "X",
    "(0040, 1101)": "D",
    "(0040, A123)": "D",
    "(0008, 1048)": "X",
    "(0008, 1049)": "X",
    "(0008, 1062)": "X",
    "(4008, 0114)": "X",
    "(0040, 2016)": "Z",
    "(0018, 1004)": "X",
    "(0010, 21C0)": "X",
    "(0040, 0012)": "X",
    "(300A, 000E)": "X",
    "(3010, 007B)": "Z",
    "(3010, 0081)": "Z",
    "(0070, 0082)": "X",
    "(0070, 0083)": "X",
    "(0070, 1101)": "U",
    "(0070, 1102)": "U",
    "(3010, 0061)": "X",
    "(gggg, eeee) where gggg is odd": "X",
    "(0040, 4052)": "X",
    "(0044, 000B)": "X",
    "(0018, 1030)": "X/D",
    "(300A, 0619)": "D",
    "(300A, 0623)": "D",
    "(300A, 067D)": "Z",
    "(300A, 067C)": "D",
    "(0018, 1078)": "X",
    "(0018, 1072)": "X",
    "(0018, 1079)": "X",
    "(0018, 1073)": "X",
    "(300C, 0113)": "X",
    "(0040, 100A)": "X",
    "(0032, 1030)": "X",
    "(3010, 005C)": "Z",
    "(0400, 0565)": "D",
    "(0040, 2001)": "X",
    "(0040, 1002)": "X",
    "(0032, 1066)": "X",
    "(0032, 1067)": "X",
    "(300A, 073A)": "D",
    "(3010, 000B)": "U",
    "(0040, A13A)": "D",
    "(0400, 0402)": "X",
    "(300A, 0083)": "U",
    "(3010, 006F)": "U",
    "(3010, 0031)": "U",
    "(3006, 0024)": "U",
    "(0040, 4023)": "U",
    "(0008, 1140)": "X/Z/U*",
    "(0040, A172)": "U",
    "(0038, 0004)": "X",
    "(0010, 1100)": "X",
    "(0008, 1120)": "X",
    "(0008, 1111)": "X/Z/D",
    "(0400, 0403)": "X",
    "(0008, 1155)": "U",
    "(0004, 1511)": "U",
    "(0008, 1110)": "X/Z",
    "(300A, 0785)": "U",
    "(0008, 0092)": "X",
    "(0008, 0090)": "Z",
    "(0008, 0094)": "X",
    "(0008, 0096)": "X",
    "(0010, 2152)": "X",
    "(3006, 00C2)": "U",
    "(0040, 0275)": "X",
    "(0032, 1070)": "X",
    "(0040, 1400)": "X",
    "(0032, 1060)": "X/Z",
    "(0040, 1001)": "X",
    "(0040, 1005)": "X",
    "(0018, 9937)": "X",
    "(0000, 1001)": "U",
    "(0032, 1032)": "X",
    "(0032, 1033)": "X",
    "(0018, 9185)": "X",
    "(0010, 2299)": "X",
    "(0010, 2297)": "X",
    "(4008, 4000)": "X",
    "(4008, 0118)": "X",
    "(4008, 0040)": "X",
    "(4008, 0042)": "X",
    "(300E, 0004)": "Z",
    "(300E, 0008)": "X/Z",
    "(300E, 0005)": "Z",
    "(3006, 0028)": "X",
    "(3006, 0038)": "X",
    "(3006, 00A6)": "Z",
    "(3006, 0026)": "Z",
    "(3006, 0088)": "X",
    "(3006, 0085)": "X",
    "(300A, 0615)": "Z",
    "(300A, 0611)": "Z",
    "(3010, 005A)": "Z",
    "(300A, 0006)": "X/D",
    "(300A, 0004)": "X",
    "(300A, 0002)": "D",
    "(300A, 0003)": "X",
    "(300A, 0007)": "X/D",
    "(3010, 0054)": "D",
    "(300A, 062A)": "D",
    "(3010, 0056)": "X/D",
    "(3010, 003B)": "U",
    "(3008, 0162)": "D",
    "(3008, 0164)": "D",
    "(3008, 0166)": "D",
    "(3008, 0168)": "D",
    "(0038, 001A)": "X",
    "(0038, 001B)": "X",
    "(0038, 001C)": "X",
    "(0038, 001D)": "X",
    "(0040, 4034)": "X",
    "(0038, 001E)": "X",
    "(0040, 0006)": "X",
    "(0040, 000B)": "X",
    "(0040, 0007)": "X",
    "(0040, 0004)": "X",
    "(0040, 0005)": "X",
    "(0040, 4008)": "X",
    "(0040, 0009)": "X",
    "(0040, 0011)": "X",
    "(0040, 4010)": "X",
    "(0040, 0002)": "X",
    "(0040, 4005)": "X",
    "(0040, 0003)": "X",
    "(0040, 0001)": "X",
    "(0040, 4027)": "X",
    "(0040, 0010)": "X",
    "(0040, 4025)": "X",
    "(0032, 1020)": "X",
    "(0032, 1021)": "X",
    "(0032, 1000)": "X",
    "(0032, 1001)": "X",
    "(0032, 1010)": "X",
    "(0032, 1011)": "X",
    "(0072, 005F)": "D",
    "(0072, 0061)": "D",
    "(0072, 0063)": "D",
    "(0072, 0066)": "D",
    "(0072, 0068)": "D",
    "(0072, 0065)": "D",
    "(0072, 006A)": "D",
    "(0072, 006C)": "D",
    "(0072, 006E)": "D",
    "(0072, 006B)": "D",
    "(0072, 006D)": "D",
    "(0072, 0071)": "D",
    "(0072, 0070)": "D",
    "(0008, 0021)": "X/D",
    "(0008, 103E)": "X",
    "(0020, 000E)": "U",
    "(0008, 0031)": "X/D",
    "(0038, 0062)": "X",
    "(0038, 0060)": "X",
    "(300A, 01B2)": "X",
    "(300A, 01A6)": "X",
    "(0040, 06FA)": "X",
    "(0010, 21A0)": "X",
    "(0100, 0420)": "X",
    "(0008, 0018)": "U",
    "(3010, 0015)": "U",
    "(0018, 936A)": "D",
    "(0034, 0005)": "D",
    "(0008, 2112)": "X/Z/U*",
    "(300A, 0216)": "X",
    "(0400, 0564)": "Z",
    "(3008, 0105)": "X/Z",
    "(0018, 9369)": "D",
    "(300A, 022C)": "D",
    "(300A, 022E)": "D",
    "(0038, 0050)": "X",
    "(0040, 050A)": "X",
    "(0040, 0602)": "X",
    "(0040, 0551)": "D",
    "(0040, 0610)": "Z",
    "(0040, 0600)": "X",
    "(0040, 0554)": "U",
    "(0018, 9516)": "X/D",
    "(0008, 1010)": "X/Z/D",
    "(0088, 0140)": "U",
    "(3006, 0008)": "Z",
    "(3006, 0006)": "X",
    "(3006, 0002)": "D",
    "(3006, 0004)": "X",
    "(3006, 0009)": "Z",
    "(0032, 1040)": "X",
    "(0032, 1041)": "X",
    "(0032, 4000)": "X",
    "(0032, 1050)": "X",
    "(0032, 1051)": "X",
    "(0008, 0020)": "Z",
    "(0008, 1030)": "X",
    "(0020, 0010)": "Z",
    "(0032, 0012)": "X",
    "(0020, 000D)": "U",
    "(0032, 0034)": "X",
    "(0032, 0035)": "X",
    "(0008, 0030)": "Z",
    "(0032, 0032)": "X",
    "(0032, 0033)": "X",
    "(0044, 0010)": "X",
    "(0020, 0200)": "U",
    "(0018, 2042)": "U",
    "(0040, A354)": "X",
    "(0040, DB0D)": "U",
    "(0040, DB0C)": "U",
    "(0040, DB07)": "X",
    "(0040, DB06)": "X",
    "(4000, 4000)": "X",
    "(2030, 0020)": "X",
    "(0040, A122)": "D",
    "(0040, A112)": "X",
    "(0018, 1201)": "X",
    "(0018, 700E)": "X/D",
    "(0018, 1014)": "X",
    "(0008, 0201)": "X",
    "(0088, 0910)": "X",
    "(0088, 0912)": "X",
    "(0088, 0906)": "X",
    "(0088, 0904)": "X",
    "(0062, 0021)": "U",
    "(0008, 1195)": "U",
    "(0018, 5011)": "X",
    "(3008, 0024)": "D",
    "(3008, 0025)": "D",
    "(3008, 0250)": "X/D",
    "(300A, 00B2)": "X/Z",
    "(300A, 0608)": "D",
    "(300A, 0609)": "U",
    "(300A, 0700)": "U",
    "(3010, 0077)": "D/X",
    "(300A, 000B)": "X",
    "(3010, 007A)": "Z",
    "(3008, 0251)": "X/D",
    "(300A, 0736)": "D",
    "(300A, 0734)": "D",
    "(0018, 100A)": "X",
    "(0040, A124)": "U",
    "(0018, 1009)": "X",
    "(3010, 0033)": "D",
    "(3010, 0034)": "D",
    "(0040, A352)": "X",
    "(0040, A358)": "X",
    "(0040, A030)": "D",
    "(0040, A088)": "Z",
    "(0040, A075)": "D",
    "(0040, A073)": "D",
    "(0040, A027)": "D",
    "(0038, 4000)": "X",
    "(0018, 9371)": "D",
    "(0018, 9373)": "X",
    "(0018, 9367)": "D",
}
